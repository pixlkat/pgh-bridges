{"version":3,"sources":["api/socrataApi.tsx","features/bridges/bridgeSlice.ts","features/bridges/BridgesTable.tsx","features/bridges/BridgeListPage.tsx","features/bridges/BridgeFooter.tsx","App.tsx","app/rootReducer.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["getBridgeList","a","process","url","axios","get","bridgeResponse","bridges","data","total","length","createSlice","name","initialState","bridgesByRefNumber","bridgeIdList","isLoading","error","reducers","getBridgesStart","state","getBridgesSuccess","payload","forEach","bridge","bridge_reference_number","map","getBridgesFailure","action","actions","thousands_separator","val","replace","BridgeRatingLookup","code","N","9","8","7","6","5","4","3","2","1","0","DEMO","viewDetails","cell","formatterParams","rowData","getRow","getData","feature_carried","feature_intersected","structuretype","spans","deck_area","cond_rate_bridge_deck","cond_rate_bridge_superstructure","cond_rate_bridge_substructure","cond_rate_bridge_culvert","sufficiency_rating","11","12","21","25","26","27","31","32","60","62","64","68","69","70","80","owner_code","BridgesTable","props","JSON","parse","stringify","columns","title","field","width","sorter","hozAlign","formatter","precision","headerSort","className","options","tooltips","tooltipsHeader","layout","height","pagination","BridgesListPage","dispatch","useDispatch","useSelector","bridgesError","bridgeRefNumber","useEffect","toString","bridgeTable","id","BridgeFooter","href","App","Container","Jumbotron","rootReducer","combineReducers","bridgesReducer","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1e539bfe.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport interface BridgeDetailsRawData {\n  bridge_reference_number: number;\n  location_structure_name: string;\n  feature_carried: string;\n  feature_intersected: string;\n  owner_code: number;\n  length: number;\n  deck_area: number;\n  spans: number;\n  structuretype: string;\n  year_built: string;\n  post_status: string;\n  cond_rate_bridge_deck: string;\n  cond_rate_bridge_superstructure: string;\n  cond_rate_bridge_substructure: string;\n  cond_rate_bridge_culvert: string;\n  sufficiency_rating: number;\n  annual_daily_traffic: string;\n}\n\nexport interface BridgeListResponse {\n  bridges: BridgeDetailsRawData[];\n  total: number;\n}\n\nexport async function getBridgeList(): Promise<BridgeListResponse> {\n  const apiKey = process.env.REACT_APP_APP_TOKEN;\n  const select =\n    'bridge_reference_number,location_structure_name,feature_carried,feature_intersected,owner_code,length,deck_area,spans,structuretype,year_built,post_status,cond_rate_bridge_deck,cond_rate_bridge_superstructure,cond_rate_bridge_substructure,cond_rate_bridge_culvert,sufficiency_rating,MAX(annual_daily_traffic) AS annual_daily_traffic';\n  const group =\n    'bridge_reference_number,location_structure_name,feature_carried,feature_intersected,owner_code,length,deck_area,spans,structuretype,year_built,post_status,cond_rate_bridge_deck,cond_rate_bridge_superstructure,cond_rate_bridge_substructure,cond_rate_bridge_culvert,sufficiency_rating';\n  const where = \"municipal_code='02/301 - PITTSBURGH'\";\n  const url = `https://data.pa.gov/resource/7fjz-jhc5.json?$select=${select}&$where=${where}&$group=${group}&$order=bridge_reference_number&$$app_token=${apiKey}`;\n  const bridgeResponse = await axios.get<BridgeDetailsRawData[]>(url);\n  return {\n    bridges: bridgeResponse.data,\n    total: bridgeResponse.data.length,\n  };\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport {\n  BridgeDetailsRawData,\n  BridgeListResponse,\n  getBridgeList,\n} from '../../api/socrataApi';\nimport { AppThunk } from '../../app/store';\n\ninterface BridgesState {\n  bridgesByRefNumber: Record<number, BridgeDetailsRawData>;\n  bridgeIdList: number[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst bridgesInitialState: BridgesState = {\n  bridgesByRefNumber: {},\n  bridgeIdList: [],\n  isLoading: false,\n  error: null,\n};\n\nfunction startLoading(state: BridgesState) {\n  state.isLoading = true;\n}\n\nfunction loadingFailed(state: BridgesState, action: PayloadAction<string>) {\n  state.isLoading = false;\n  state.error = action.payload;\n}\n\nconst bridges = createSlice({\n  name: 'bridges',\n  initialState: bridgesInitialState,\n  reducers: {\n    getBridgesStart: startLoading,\n    getBridgesSuccess(state, { payload }: PayloadAction<BridgeListResponse>) {\n      const { bridges } = payload;\n      state.isLoading = false;\n      state.error = null;\n      bridges.forEach((bridge) => {\n        state.bridgesByRefNumber[bridge.bridge_reference_number] = bridge;\n      });\n      state.bridgeIdList = bridges.map(\n        (bridge) => bridge.bridge_reference_number\n      );\n    },\n    getBridgesFailure: loadingFailed,\n  },\n});\n\nexport const {\n  getBridgesStart,\n  getBridgesSuccess,\n  getBridgesFailure,\n} = bridges.actions;\n\nexport default bridges.reducer;\n\nexport const fetchBridges = (): AppThunk => async (dispatch) => {\n  try {\n    dispatch(getBridgesStart());\n    const bridges = await getBridgeList();\n    dispatch(getBridgesSuccess(bridges));\n  } catch (err) {\n    dispatch(getBridgesFailure(err.toString()));\n  }\n};\n\n// export const fetchBridgeDetail = (bridgeRefNo: number): AppThunk => async (dispatch) => {\n//   try {\n//\n//   } catch (err) {\n//\n//   }\n// };\n","import * as React from 'react';\nimport 'react-tabulator/css/bootstrap/tabulator_bootstrap4.min.css';\nimport 'react-tabulator/lib/styles.css';\nimport { ReactTabulator } from 'react-tabulator';\n\nimport { BridgeDetailsRawData } from '../../api/socrataApi';\n\ninterface BridgeProps {\n  bridges: BridgeDetailsRawData[];\n}\nconst thousands_separator = (val: string) => {\n  return val.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n};\n\nconst OwnerLookup = (code: number) => {\n  const map: { [key: number]: string } = {\n    1: 'PennDOT',\n    2: 'County Highway Agency',\n    3: 'Town or Township Highway Agency ',\n    4: 'City, Municipal Highway Agency, Borough',\n    11: 'State Park, Forest or Reservation Agency',\n    12: 'Local Park, Forest or Reservation Agency',\n    21: 'Other State Agencies',\n    25: 'Other Local Agencies',\n    26: 'Private (other than railroad)',\n    27: 'Railroad',\n    31: 'State Toll Authority ',\n    32: 'Local Toll Authority',\n    60: 'Other Federal Agencies',\n    62: 'Bureau of Indian Affairs ',\n    64: 'U.S. Forest Service 66 National Park Service',\n    68: 'Bureau of Land Management',\n    69: 'Bureau of Reclamation',\n    70: 'Military Reservation Corps of Engineers',\n    80: 'Unknown',\n  };\n  return map[code];\n};\n\nconst BridgeRatingLookup = (code: string) => {\n  const ratings: { [key: string]: string } = {\n    N: 'Not applicable',\n    '--': 'Not applicable',\n    9: 'Excellent',\n    8: 'Very good',\n    7: 'Good, some minor problems noted',\n    6: 'Satisfactory, structural elements showing minor deterioration',\n    5: 'Fair, primary structural elements are sound but showing minor cracks and signs of deterioration',\n    4: 'Poor, deterioration of primary structural elements has advanced 3 = Serious, deterioration has seriously affected the primary structural components',\n    3: 'Serious, deterioration has seriously affected the primary structural components',\n    2: 'Critical, deterioration of primary structural components has advanced and bridge will be closely monitored, or closed, until corrective action can be taken',\n    1: 'Imminent failure, major deterioration in critical structural components. Bridge is closed but corrective action may put the bridge back into light service',\n    0: 'Failed, bridge is out of service and beyond corrective action. Superstructure is the underlying or supporting part of a bridge, for example steel members under the deck.',\n    DEMO: 'Structure has been demolished',\n  };\n  return ratings[code];\n};\n\nconst viewDetails = (\n  cell: Tabulator.CellComponent,\n  formatterParams: Tabulator.FormatterParams\n) => {\n  const row = cell.getRow();\n  const rowData = row.getData();\n\n  return `<ul class=\"list-group\">\n      <li class=\"list-group-item\"><strong>Feature Carried:</strong> ${\n        rowData.feature_carried\n      }</li>\n      <li class=\"list-group-item\"><strong>Feature Intersected:</strong> ${\n        rowData.feature_intersected\n      }</li>\n      <li class=\"list-group-item\"><strong>Structure Type:</strong> ${\n        rowData.structuretype\n      }</li>\n      <li class=\"list-group-item\"><strong>Dimensions:</strong>: Length: ${thousands_separator(\n        rowData.length\n      )} ft; Spans: ${rowData.spans}; Deck Area: ${thousands_separator(\n    rowData.deck_area\n  )} sq. ft.</li>\n      <li class=\"list-group-item\"><strong>Condition of structure:</strong>\n      <ul>\n      <li>Deck: ${BridgeRatingLookup(rowData.cond_rate_bridge_deck)}</li>\n    <li>Superstructure: ${BridgeRatingLookup(rowData.cond_rate_bridge_superstructure)}</li>\n    <li>Substructure: ${BridgeRatingLookup(rowData.cond_rate_bridge_substructure)}</li>\n    <li>Culvert: ${BridgeRatingLookup(rowData.cond_rate_bridge_culvert)}</li>\n    <li>Sufficiency Rating: ${rowData.sufficiency_rating}</li> </ul> </li>\n      <li class=\"list-group-item\"><strong>Owner:</strong> ${OwnerLookup(rowData.owner_code)}</li>\n    </ul>\n</div>`;\n};\n\nexport const BridgesTable: React.FunctionComponent<BridgeProps> = (\n  props: BridgeProps\n) => {\n  const bridges = JSON.parse(JSON.stringify(props.bridges));\n\n  const columns = [\n    {\n      title: 'Structure Name',\n      field: 'location_structure_name',\n      width: 300,\n    },\n    {\n      title: 'Year Built',\n      field: 'year_built',\n      sorter: 'number',\n      hozAlign: 'center',\n    },\n    {\n      title: 'Avg Daily Traffic',\n      field: 'annual_daily_traffic',\n      formatter: 'money',\n      formatterParams: { precision: 0 },\n      hozAlign: 'center',\n    },\n    {\n      title: 'Details',\n      field: 'feature_carried',\n      formatter: viewDetails,\n      headerSort: false,\n    },\n  ];\n  const tabulatorOptions = {\n    tooltips: true,\n    tooltipsHeader: true,\n    layout: 'fitDataFill',\n    height: 800,\n    pagination: 'local',\n  };\n\n  return (\n    <div className=\"bridges-table\">\n      <ReactTabulator\n        columns={columns}\n        data={bridges}\n        options={tabulatorOptions}\n      />\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../app/rootReducer';\nimport { fetchBridges } from './bridgeSlice';\nimport { BridgesTable } from './BridgesTable';\n\nexport const BridgesListPage = () => {\n  const dispatch = useDispatch();\n  const {\n    bridgesByRefNumber,\n    bridgeIdList,\n    isLoading,\n    error: bridgesError,\n  } = useSelector((state: RootState) => state.bridges);\n\n  const bridges = bridgeIdList.map(\n    (bridgeRefNumber) => bridgesByRefNumber[bridgeRefNumber]\n  );\n\n  useEffect(() => {\n    dispatch(fetchBridges());\n  }, [dispatch]);\n\n  if (bridgesError) {\n    return (\n      <div>\n        <h1>Something went wrong...</h1>\n        <div>{bridgesError.toString()}</div>\n      </div>\n    );\n  }\n\n  const bridgeTable = isLoading ? (\n    <h3>Loading...</h3>\n  ) : (\n    <div className={'flex-shrink-0'}>\n      <BridgesTable bridges={bridges} />\n    </div>\n  );\n\n  return <div id=\"bridge-table\">{bridgeTable}</div>;\n};\n","import * as React from 'react';\n\nexport const BridgeFooter = () => {\n  return (\n    <footer className={'footer mt-4 py-3 bg-light'}>\n      <div className={'container'}>\n        <p>Bridge data extracted from opendataPA <a href={\"https://data.pa.gov/Infrastructure-and-Development/State-Bridges-Listing-as-of-July-2018-Transportati/7fjz-jhc5\"}>State Bridges Listing as of July 2018</a></p>\n      </div>\n    </footer>\n  );\n};\n","import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport { BridgesListPage } from './features/bridges/BridgeListPage';\nimport { BridgeFooter } from './features/bridges/BridgeFooter';\n\nconst App: React.FC = () => {\n  return (\n    <Container className={'p-3 d-flex flex-column h-100'}>\n      <Jumbotron>\n        <h1 className={'header'}>Pittsburgh Bridge Data</h1>\n      </Jumbotron>\n      <BridgesListPage />\n      <BridgeFooter />\n     </Container>\n\n);\n};\n\nexport default App;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport bridgesReducer from '../features/bridges/bridgeSlice';\n\nconst rootReducer = combineReducers({\n  bridges: bridgesReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https//github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you wan your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}